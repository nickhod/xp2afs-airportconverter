#                                             Generated By
# __  ______ ____     _    _____ ____    _    _                       _    ____                          _
# \ \/ /  _ \___ \   / \  |  ___/ ___|  / \  (_)_ __ _ __   ___  _ __| |_ / ___|___  _ ____   _____ _ __| |_ ___ _ __
#  \  /| |_) |__) | / _ \ | |_  \___ \ / _ \ | | '__| '_ \ / _ \| '__| __| |   / _ \| '_ \ \ / / _ \ '__| __/ _ \ '__|
#  /  \|  __// __/ / ___ \|  _|  ___) / ___ \| | |  | |_) | (_) | |  | |_| |__| (_) | | | \ V /  __/ |  | ||  __/ |
# /_/\_\_|  |_____/_/   \_\_|   |____/_/   \_\_|_|  | .__/ \___/|_|   \__|\____\___/|_| |_|\_/ \___|_|   \__\___|_|
#                                                   |_|
#
#
# Translated from GPL licensed data from https://gateway.x-plane.com/
# This script is licensed under the GNU General Public License v3 https://www.gnu.org/licenses/gpl-3.0.en.html
#
# Airport: {{AirportICAO}} {{AirportName}}
# Generated On: {{ GeneratedOn | date:"yyyy-MM-dd HH:MM:ss UTC" }}

import MaxPlus
import pymxs

# Control which actions are performed
# This allows for manual editing between actions
drawRunways = True
drawRunwayDecals = True
drawPavementSplines = True
drawLinearFeaturesSplines = True
convertPavementSplinesToEditablePolys = True
convertLinearFeaturesSplinesToEditablePolys = True
textureRunways = True
textureRunwayDecals = True
texturePavements = True
textureLinearFeatures = True

booleanUnionRunways = True
booleanUnionPavements = True

#########################################################
# Draw Runway
#########################################################
def drawRunway(x, y, length, width, angle, name):
	obj = MaxPlus.Factory.CreateObject(MaxPlus.SuperClassIds.Shape, MaxPlus.ClassIds.Rectangle)
	obj.ParameterBlock.Length.Value = length
	obj.ParameterBlock.Width.Value = width
	node = MaxPlus.Factory.CreateNode(obj)
	node.Name = name
	maxScript("rotate $'{0}' (angleaxis {1} [0,0,1])".format(name, angle))
	node.Position = MaxPlus.Point3(x, y, 0)

#########################################################
# Draw Runways
#########################################################
def drawRunways():
    {% for runway in Runways -%}
    drawRunway({{runway.X}}, {{runway.Y}}, {{runway.Length}}, {{runway.Width}}, {{runway.Angle}}, "Runway {{runway.Index | Plus:1 }}")
    {% endfor -%}

#########################################################
# Draw Runway Decals
#########################################################
def drawRunwayDecals():
    pass

#########################################################
# Draw Pavement Splines
#########################################################
def drawPavementSplies():
    pass

#########################################################
# Convert Pavement Splines To Editable Polys
#########################################################
def convertPavementSplinesToEditablePolys():
    pass

#########################################################
# Convert Linear Feature Splines To Editable Polys
#########################################################
def convertLinearFeaturesSplinesToEditablePolys():
    pass

#########################################################
# Texture Runways
#########################################################
def textureRunways():
    pass

#########################################################
# Texture Runway Decals
#########################################################
def textureRunwayDecals():
    pass

#########################################################
# Texture Pavements
#########################################################
def texturePavements():
    pass

#########################################################
# Texture Linear Features
#########################################################
def textureLinearFeatures():
    pass

#########################################################
# Boolean Union Runways
#########################################################
def booleanUnionRunways():
    pass

#########################################################
# Boolean Union Pavements
#########################################################
def booleanUnionPavements():
    pass


def maxScript(script):
    return MaxPlus.Core.EvalMAXScript(script)

def main():

    # Reset the max file
    maxScript("resetMaxFile #noprompt")

    #Set units to meters. 1 unit = 1 meter
    maxScript("units.DisplayType = #Metric")
    maxScript("units.MetricType = #meters")
    maxScript("units.SystemType = #meters")
    maxScript("units.SystemScale = 1")

    if drawRunways:
        drawRunways()

    if drawRunwayDecals:
        drawRunwayDecals()

    if drawPavementSplies:
        drawPavementSplies()

    if convertPavementSplinesToEditablePolys:
        convertPavementSplinesToEditablePolys()

    if convertLinearFeaturesSplinesToEditablePolys:
        convertLinearFeaturesSplinesToEditablePolys()

    if textureRunways:
        textureRunways()

    if textureRunwayDecals:
        textureRunwayDecals()

    if texturePavements:
        texturePavements()

    if textureLinearFeatures:
        textureLinearFeatures()

    if booleanUnionRunways:
        booleanUnionRunways()

    if booleanUnionPavements:
        booleanUnionPavements()

main()


{% comment %}




# ######################################
# Draw Runways
# ######################################

{% for runway in Runways -%}
# ######################################
# Runway {{runway.Index | Plus:1 }}
macros.run "Objects Shapes" "Rectangle"
Rectangle length:{{runway.Length}} width:{{runway.Width}} cornerRadius:0 pos:[0,0,0] isSelected:on
$.name = "Runway {{runway.Index | Plus:1 }}"
select $Runway {{runway.Index | Plus:1 }}
toolMode.coordsys #view
rotate $ (angleaxis {{runway.Angle}} [0,0,1])

$.pos.x = {{runway.X}}
$.pos.y = {{runway.Y}}
poly = convertToPoly($)

{% endfor -%}


# ######################################
# Draw DAT File Pavements
# ######################################

{% for pavement in DATPavements -%}
# ######################################
# Pavement Pavement {{pavement.Index | Plus:1 }} {{pavement.Name}}
{% for node in pavement.Nodes -%}
{%- if node.Render -%}
{%- if node.OpenLoop -%}
sp = splineShape()
sp.steps = 12
addNewSpline sp
{%- endif -%}
{%- if node.IsBezier -%}
addKnot sp 1 #bezier #curve [{{node.X}},{{node.Y}},0] [{{node.X}},{{node.Y}},0] [{{node.BezierControlX}},{{node.BezierControlY}},0]
{%- else -%}
addKnot sp 1 #corner #line [{{node.X}},{{node.Y}},0]
{%- endif -%}
{%- if node.CloseLoop -%}
close sp 1
updateShape sp
select sp
sp.name = "Pavement {{pavement.Index | Plus:1 }} {{pavement.Name}}"
poly = convertToPoly(sp)
{%- endif -%}
{%- endif -%}
{% endfor -%}

{% endfor -%}

# ######################################
# Draw DSF File Pavements
# ######################################

# ######################################
# Draw DSF File Buildings
# ######################################

# Quadify Runway
#select $Runway1
#modPanel.addModToSelection (Quadify_Mesh ()) ui:on
#$.modifiers[#Quadify_Mesh].quadsize = 16
{% endcomment %}

