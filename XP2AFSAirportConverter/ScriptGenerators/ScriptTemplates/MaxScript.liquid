#                                             Generated By
# __  ______ ____     _    _____ ____    _    _                       _    ____                          _
# \ \/ /  _ \___ \   / \  |  ___/ ___|  / \  (_)_ __ _ __   ___  _ __| |_ / ___|___  _ ____   _____ _ __| |_ ___ _ __
#  \  /| |_) |__) | / _ \ | |_  \___ \ / _ \ | | '__| '_ \ / _ \| '__| __| |   / _ \| '_ \ \ / / _ \ '__| __/ _ \ '__|
#  /  \|  __// __/ / ___ \|  _|  ___) / ___ \| | |  | |_) | (_) | |  | |_| |__| (_) | | | \ V /  __/ |  | ||  __/ |
# /_/\_\_|  |_____/_/   \_\_|   |____/_/   \_\_|_|  | .__/ \___/|_|   \__|\____\___/|_| |_|\_/ \___|_|   \__\___|_|
#                                                   |_|
#
#
# Translated from GPL licensed data from https://gateway.x-plane.com/
# This script is licensed under the GNU General Public License v3 https://www.gnu.org/licenses/gpl-3.0.en.html
#
# Airport: {{AirportICAO}} {{AirportName}}
# Generated On: {{ GeneratedOn | date:"yyyy-MM-dd HH:MM:ss UTC" }}

import MaxPlus
import pymxs

# High level control of what to render
processRunways = True
processRunwayDecals = True
processPavements = True
processBuildings = False
processLinearFeatures = True
processGroundPoly = True


# Fine grained control of which actions are performed
# This allows for manual editing between actions
doDrawRunways = True
doDrawRunwayDecals = True
doDrawDATFilePavementSplines = True
doDrawLinearFeaturesSplines = True
doDrawDSFFilePavementSplines = True
doDrawDSFFileBuildingSplines = True
doDrawSigns = True
doConvertDATFilePavementSplinesToEditablePolys = True
doConvertLinearFeaturesSplinesToEditablePolys = True
doConvertDSFFilePavementSplinesToEditablePolys = True
doConvertDSFFileBuildingSplinesToEditablePolys = True
doTextureRunways = True
doTextureRunwayDecals = True
doTexturePavements = True
doTextureLinearFeatures = True
doBooleanUnionRunways = True
doBooleanUnionPavements = True
doDrawAirportBoundarySpline = True
doSaveFile = True

saveFilePath = r"{{SaveFilePath}}"
texturesPath = r"{{TexturesPath}}"
materials = {}

# Building Heights
buildingHeights = []
{% for building in Buildings -%}
buildingHeights.append({{building.Height}})
{% endfor -%}

class SplineNode:

    def __init__(self, x, y, isBezier, isBezierCorner, isCurve, bezierControl1X, bezierControl1Y, bezierControl2X, bezierControl2Y, openLoop, closeLoop, render):
        self.x = x
        self.y = y
        self.isBezier = isBezier
        self.isBezierCorner = isBezierCorner
        self.isCurve = isCurve
        self.bezierControl1X = bezierControl1X
        self.bezierControl1Y = bezierControl1Y
        self.bezierControl2X = bezierControl2X
        self.bezierControl2Y = bezierControl2Y
        self.openLoop = openLoop
        self.closeLoop = closeLoop
        self.render = render


class CustomMaterial:

    def __init__(self):
        self.name = ""
        self.materialEditorSlot = 0
        self.ambientMap = ""
        self.diffuseMap = ""
        self.specularMap = ""
        self.specualLevelMap = ""
        self.opacityMap = ""
        self.bumpMap = ""

#########################################################
# To Bool
#########################################################
def toBool(value):
    if value == "true":
        return True
    elif value == "false":
        return False



#########################################################
# Set Material Map
#########################################################
def setMaterialMap(material, materialSubMaps, mapId, bitmapPath):
    bitmapTex = MaxPlus.Factory.CreateDefaultBitmapTex()
    bitmapTex.SetMapName(bitmapPath)
    bitmapTex.ReloadBitmapAndUpdate()
    material.SetEnableMap(mapId, True)
    materialSubMaps.SetSubTexmap(mapId, bitmapTex)


#########################################################
# Create Material
#########################################################
def createMaterial(customMaterial):
    #bitmapTex = MaxPlus.Factory.CreateDefaultBitmapTex()
    #bitmapTex.SetMapName(r"E:\\Games\\Aerofly Scenery Examples\\aerofly_fs_2_sdk_scenery_workshop_20170714\\aerofly_fs_2_sdk_scenery_workshop\\kigm_kingman\\asphalt_dark_color.tif")
    #bitmapTex.ReloadBitmapAndUpdate()


    material = MaxPlus.Factory.CreateDefaultStdMat()
    materialSubMaps = MaxPlus.ISubMap._CastFrom(material)

    # Ambient Map
    if customMaterial.ambientMap != "":
        setMaterialMap(material, materialSubMaps, 0, texturesPath + customMaterial.ambientMap)

    # Diffuse Map
    if customMaterial.diffuseMap != "":
        setMaterialMap(material, materialSubMaps, 1, texturesPath + customMaterial.diffuseMap)

    # Specular Map
    if customMaterial.specularMap != "":
        setMaterialMap(material, materialSubMaps, 2, texturesPath + customMaterial.specularMap)

    # Specular Level Map
    if customMaterial.specualLevelMap != "":
        setMaterialMap(material, materialSubMaps, 3, texturesPath + customMaterial.specualLevelMap)

    material.SetName(MaxPlus.WStr(customMaterial.name))
    MaxPlus.MaterialManager.PutMtlToMtlEditor(material, customMaterial.materialEditorSlot)

    #MaxPlus.Core.EvalMAXScript("tempMat = getMeditMaterial 1")
    #MaxPlus.Core.EvalMAXScript("showTextureMap (getMeditMaterial 1) on")
    #MaxPlus.Core.EvalMAXScript("enableHardwareMaterial tempMat on")
    #MaxPlus.Core.EvalMAXScript("showHWTextureMap tempMat on")
    MaxPlus.Core.EvalMAXScript("for mat in (getClassInstances standard processAllAnimatables:true) do showTextureMap mat on")

    return material

#########################################################
# Add Object To Layer
#########################################################
def addObjectToLayer(objectName, layerName)
    # Does this layer alrady exist?
    layer = MaxPlus.LayerManager.GetLayer(MaxPlus.WStr(layerName))

    # If the layer doesn't exist, add it
    if !layer:
        layer = MaxPlus.LayerManager.CreateLayer(MaxPlus.WStr(layerName))

    # Get the node and add it to the layer
    node = MaxPlus.INode.GetINodeByName(objectName)
    MaxPlus.Layer.AddToLayer(layer, node)


#########################################################
# Draw Runway
#########################################################
def drawRunway(x, y, length, width, angle, name):
    obj = MaxPlus.Factory.CreateObject(MaxPlus.SuperClassIds.Shape, MaxPlus.ClassIds.Rectangle)
    obj.ParameterBlock.Length.Value = length
    obj.ParameterBlock.Width.Value = width
    node = MaxPlus.Factory.CreateNode(obj)
    node.Name = name
    maxScript("rotate $'{0}' (angleaxis {1} [0,0,1])".format(name, angle))
    node.Position = MaxPlus.Point3(x, y, 0)
    node.Convert(MaxPlus.ClassIds.PolyMeshObject)

#########################################################
# Draw Spline
#########################################################
def drawSpline(splineNodeArray, namePrefix, name, index):
    for node in splineNodeArray:
        if node.render:
            if node.openLoop:
                maxScript("sp = splineShape()")
                maxScript("sp.steps = 12")
                maxScript("addNewSpline sp")

            if node.isBezier:
                if node.isBezierCorner:
                    maxScript("addKnot sp 1 #bezier #line [{0}, {1}, 0] [{2}, {3}, 0] [{4}, {5}, 0]".format(node.x, node.y, node.bezierControl1X, node.bezierControl1Y, node.bezierControl2X, node.bezierControl2Y))
                else:
                    maxScript("addKnot sp 1 #bezier #curve [{0}, {1}, 0] [{2}, {3}, 0] [{4}, {5}, 0]".format(node.x, node.y, node.bezierControl1X, node.bezierControl1Y, node.bezierControl2X, node.bezierControl2Y))
            else:
                if node.isCurve:
                    maxScript("addKnot sp 1 #corner #curve [{0}, {1}, 0]".format(node.x, node.y))
                else:
                    maxScript("addKnot sp 1 #corner #line [{0}, {1}, 0]".format(node.x, node.y))

            if node.closeLoop:
                maxScript("close sp 1")
                maxScript("updateShape sp")
                maxScript("select sp")
                maxScript("sp.name = \"{0} {1} {2}\"".format(namePrefix, index+1, name))

                splineName = "{0} {1} {2}".format(namePrefix, index+1, name)
                addObjectToLayer(splineName, namePrefix + "s")
                #maxScript("poly = convertToPoly(sp)")


#########################################################
# Draw Runways
#########################################################
def drawRunways():
    {% for runway in Runways -%}
    drawRunway({{runway.X}}, {{runway.Y}}, {{runway.Length}}, {{runway.Width}}, {{runway.Angle}}, "Runway {{runway.Index | Plus:1 }}")
    {% endfor -%}

#########################################################
# Draw Runway Decals
#########################################################
def drawRunwayDecals():
    {% for runway in Runways -%}
    drawSingleRunwayDecals("Runway {{runway.Index | Plus:1 }}")
    {% endfor -%}

#########################################################
# Draw Single Runway Decals
#########################################################
def drawSingleRunwayDecals(name):
    pass

#########################################################
# Draw DAT File Pavement Splines
#########################################################
def drawDATFilePavementSplines():

    {% for pavement in DATPavements -%}
    # Pavement Pavement {{pavement.Index | Plus:1 }} {{pavement.Name}}
        splineNodeArray = []
        pavementName = "{{pavement.Name}}"
        pavementIndex = {{pavement.Index}}
    {% for node in pavement.Nodes -%}
    splineNodeArray.append(SplineNode({{node.X}},{{node.Y}},toBool("{{node.IsBezier}}"),toBool("{{node.IsBezierCorner}}"),toBool("{{node.IsCurve}}"),{{node.BezierControl1X}},{{node.BezierControl1Y}},{{node.BezierControl2X}},{{node.BezierControl2Y}},toBool("{{node.OpenLoop}}"),toBool("{{node.CloseLoop}}"),toBool("{{node.Render}}"))) {% if node.OpenLoop %}#open{% endif %} {% if node.CloseLoop %}#close{% endif %}
    {% endfor -%}
    drawSpline(splineNodeArray, "Pavement", pavementName, pavementIndex)
    {% endfor -%}

#########################################################
# Draw DSF File Pavement Splines
#########################################################
def drawDSFFilePavementSplines():
    pass

#########################################################
# Draw DSF File Building Splines
#########################################################
def drawDSFFileBuildingSplines():

    {% for building in Buildings -%}
    # Building{{building.Index | Plus:1 }} {{building.Name}}
        splineNodeArray = []
        buildingName = "{{building.Name}}"
        buildingIndex = {{building.Index}}
    {% for node in building.Nodes -%}
    splineNodeArray.append(SplineNode({{node.X}},{{node.Y}},toBool("{{node.IsBezier}}"),toBool("{{node.IsBezierCorner}}"),toBool("{{node.IsCurve}}"),{{node.BezierControl1X}},{{node.BezierControl1Y}},{{node.BezierControl2X}},{{node.BezierControl2Y}},toBool("{{node.OpenLoop}}"),toBool("{{node.CloseLoop}}"),toBool("{{node.Render}}")))
    {% endfor -%}
    drawSpline(splineNodeArray, "Building", buildingName, buildingIndex)
    {% endfor -%}

#########################################################
# Draw Signs
#########################################################
def drawSigns():
    pass

#########################################################
# Convert DAT File Pavement Splines To Editable Polys
#########################################################
def convertDATFilePavementSplinesToEditablePolys():
    pass

#########################################################
# Convert Linear Feature Splines To Editable Polys
#########################################################
def convertLinearFeaturesSplinesToEditablePolys():
    pass

#########################################################
# Convert DSF File Pavement Splines To Editable Polys
#########################################################
def convertDSFFilePavementSplinesToEditablePolys():
    pass

#########################################################
# Convert DSF File Building Splines To Editable Polys
#########################################################
def convertDSFFileBuildingSplinesToEditablePolys():

    {% for building in Buildings -%}
# Building{{building.Index | Plus:1 }} {{building.Name}}
    nodeName = "Building {{building.Index | Plus:1 }} {{building.Name}}"
    node = MaxPlus.INode.GetINodeByName(nodeName)
    node.Convert(MaxPlus.ClassIds.PolyMeshObject)
    shellModifier = MaxPlus.Factory.CreateObjectModifier(MaxPlus.ClassIds.Shell)
    shellModifier.ParameterBlock.OuterAmount.Value = buildingHeights[{{building.Index}}]
    node.AddModifier(shellModifier)
    {% endfor -%}


#########################################################
# Texture Runways
#########################################################
def textureRunways():
    {% for runway in Runways -%}
    textureRunway("Runway {{runway.Index | Plus:1 }}", {{runway.Length}}, {{runway.Width}}, "{{runway.SurfaceType}}", "{{runway.ShoulderType}}")
    {% endfor -%}

#########################################################
# Texture Runway
#########################################################
def textureRunway(name, length, width, surfaceType, shoulderType):
    node = MaxPlus.INode.GetINodeByName(name)
    node.Material = materials["runwayDark"]
    unwrapUVWModifier = MaxPlus.Factory.CreateObjectModifier(MaxPlus.ClassIds.Unwrap_UVW)
    node.AddModifier(unwrapUVWModifier)
    pass

#########################################################
# Texture Runway Decals
#########################################################
def textureRunwayDecals():
    pass

#########################################################
# Texture Runway Decals
#########################################################
def textureSingleRunwayDecals(name):
    pass

#########################################################
# Texture Pavements
#########################################################
def texturePavements():
    pass

#########################################################
# Texture Linear Features
#########################################################
def textureLinearFeatures():
    pass

#########################################################
# Boolean Union Runways
#########################################################
def booleanUnionRunways():
    pass

#########################################################
# Boolean Union Pavements
#########################################################
def booleanUnionPavements():
    pass


#########################################################
# Draw Airport Boundary Spline
#########################################################
def drawAirportBoundarySpline():
        splineNodeArray = []
    {% for node in AirportBoundary.Nodes -%}
    splineNodeArray.append(SplineNode({{node.X}},{{node.Y}},toBool("{{node.IsBezier}}"),toBool("{{node.IsBezierCorner}}"),toBool("{{node.IsCurve}}"),{{node.BezierControl1X}},{{node.BezierControl1Y}},{{node.BezierControl2X}},{{node.BezierControl2Y}},toBool("{{node.OpenLoop}}"),toBool("{{node.CloseLoop}}"),toBool("{{node.Render}}")))
    {% endfor -%}
    drawSpline(splineNodeArray, "", "Airport Boundary", 0)

def maxScript(script):
    return MaxPlus.Core.EvalMAXScript(script)

def main():

    # Reset the max file
    MaxPlus.FileManager.Reset(True)

    # Maximise the top viewport
    MaxPlus.ViewportManager.SetActiveViewport(0)
    MaxPlus.ViewportManager.SetViewportMax(True)

    #Set units to meters. 1 unit = 1 meter
    maxScript("units.DisplayType = #Metric")
    maxScript("units.MetricType = #meters")
    maxScript("units.SystemType = #meters")
    maxScript("units.SystemScale = 1")

    # Setup materials

    # White decals
    whiteDecalsCustomMaterial = CustomMaterial()
    whiteDecalsCustomMaterial.name = "White Decals"
    whiteDecalsCustomMaterial.materialEditorSlot = 0
    whiteDecalsCustomMaterial.diffuseMap = "runway_decal_01_color.tif"
    whiteDecalsMaterial = createMaterial(whiteDecalsCustomMaterial)

    # Mixed decals
    mixedDecalsCustomMaterial = CustomMaterial()
    mixedDecalsCustomMaterial.name = "Mixed Decals"
    mixedDecalsCustomMaterial.materialEditorSlot = 1
    mixedDecalsCustomMaterial.diffuseMap = "runway_decal_00_color.tif"
    mixedDecalsMaterial = createMaterial(mixedDecalsCustomMaterial)

    # Runway Dark
    runwayDarkCustomMaterial = CustomMaterial()
    runwayDarkCustomMaterial .name = "Mixed Decals"
    runwayDarkCustomMaterial .materialEditorSlot = 2
    runwayDarkCustomMaterial .diffuseMap = "runway_dark_color.tif"
    runwayDarkCustomMaterial .specularMap = "runway_dark_specular.tif"
    runwayDarkCustomMaterial .specularLevelMap = "runway_dark_specular_alpha.tif"
    runwayDarkMaterial = createMaterial(runwayDarkCustomMaterial)

    materials["whiteDecials"] = whiteDecalsMaterial
    materials["mixedDecals"] = mixedDecalsMaterial
    materials["runwayDark"] = runwayDarkMaterial

    if processRunways:
        if doDrawRunways:
            drawRunways()

    if processRunwayDecals:
        if doDrawRunwayDecals:
            drawRunwayDecals()

    if processPavements:
        if doDrawDATFilePavementSplines:
            drawDATFilePavementSplines()

    if processPavements:
        if doDrawDSFFilePavementSplines:
            drawDSFFilePavementSplines()

    if processBuildings:
        if doDrawDSFFileBuildingSplines:
            drawDSFFileBuildingSplines()

    if processPavements:
        if doConvertDATFilePavementSplinesToEditablePolys:
            convertDATFilePavementSplinesToEditablePolys()

    if processLinearFeatures:
        if doConvertLinearFeaturesSplinesToEditablePolys:
            convertLinearFeaturesSplinesToEditablePolys()

    if processPavements:
        if doConvertDSFFilePavementSplinesToEditablePolys:
            convertDSFFilePavementSplinesToEditablePolys()

    if processBuildings:
        if doConvertDSFFileBuildingSplinesToEditablePolys:
            convertDSFFileBuildingSplinesToEditablePolys()

    if processRunways:
        if doTextureRunways:
            textureRunways()

    if processRunwayDecals:
        if doTextureRunwayDecals:
            textureRunwayDecals()

    if processPavements:
        if doTexturePavements:
            texturePavements()

    if processLinearFeatures:
        if doTextureLinearFeatures:
            textureLinearFeatures()

    if processRunways:
        if doBooleanUnionRunways:
            booleanUnionRunways()

    if processPavements:
        if doBooleanUnionPavements:
            booleanUnionPavements()

    if doDrawSigns:
        drawSigns()

    if processGroundPoly:
        drawAirportBoundarySpline()

    if doSaveFile:
        maxScript("saveMaxFile \"{0}\" saveAsVersion:2016".format(saveFilePath))

main()
