#                                             Generated By
# __  ______ ____     _    _____ ____    _    _                       _    ____                          _
# \ \/ /  _ \___ \   / \  |  ___/ ___|  / \  (_)_ __ _ __   ___  _ __| |_ / ___|___  _ ____   _____ _ __| |_ ___ _ __
#  \  /| |_) |__) | / _ \ | |_  \___ \ / _ \ | | '__| '_ \ / _ \| '__| __| |   / _ \| '_ \ \ / / _ \ '__| __/ _ \ '__|
#  /  \|  __// __/ / ___ \|  _|  ___) / ___ \| | |  | |_) | (_) | |  | |_| |__| (_) | | | \ V /  __/ |  | ||  __/ |
# /_/\_\_|  |_____/_/   \_\_|   |____/_/   \_\_|_|  | .__/ \___/|_|   \__|\____\___/|_| |_|\_/ \___|_|   \__\___|_|
#                                                   |_|
#
#
# Translated from GPL licensed data from https://gateway.x-plane.com/
# This script is licensed under the GNU General Public License v3 https://www.gnu.org/licenses/gpl-3.0.en.html
#
# Airport: {{AirportICAO}} {{AirportName}}
# Generated On: {{ GeneratedOn | date:"yyyy-MM-dd HH:MM:ss UTC" }}

import MaxPlus
import pymxs

# Control which actions are performed
# This allows for manual editing between actions
drawRunways = True
drawRunwayDecals = True
drawDATFilePavementSplines = True
drawLinearFeaturesSplines = True
drawDSFFilePavementSplines = True
drawDSFFileBuildings = True
drawSigns = True
convertDATFilePavementSplinesToEditablePolys = True
convertLinearFeaturesSplinesToEditablePolys = True
convertDSFFilePavementSplinesToEditablePolys = True
textureRunways = True
textureRunwayDecals = True
texturePavements = True
textureLinearFeatures = True
booleanUnionRunways = True
booleanUnionPavements = True
saveFile = True

saveFilePath = r"{{SaveFilePath}}"

class SplineNode:

    def __init__(self, x, y, isBezier, bezierControlX, bezierControlY, openLoop, closeLoop, render):
        self.x = x
        self.y = y
        self.isBezier = isBezier
        self.bezierControlX = bezierControlX
        self.bezierControlY = bezierControlY
        self.openLoop = openLoop
        self.closeLoop = closeLoop
        self.render = render

def toBool(value):
    if value == "true":
        return True
    elif value == "false":
        return False



#########################################################
# Draw Runway
#########################################################
def drawRunway(x, y, length, width, angle, name):
	obj = MaxPlus.Factory.CreateObject(MaxPlus.SuperClassIds.Shape, MaxPlus.ClassIds.Rectangle)
	obj.ParameterBlock.Length.Value = length
	obj.ParameterBlock.Width.Value = width
	node = MaxPlus.Factory.CreateNode(obj)
	node.Name = name
	maxScript("rotate $'{0}' (angleaxis {1} [0,0,1])".format(name, angle))
	node.Position = MaxPlus.Point3(x, y, 0)
	node.Convert(MaxPlus.ClassIds.PolyMeshObject)

#########################################################
# Draw Spline
#########################################################
def drawSpline(splineNodeArray, name, index):
    for node in splineNodeArray:
        if node.render:
            if node.openLoop:
                maxScript("sp = splineShape()")
                maxScript("sp.steps = 12")
                maxScript("addNewSpline sp")

            if node.isBezier:
                maxScript("addKnot sp 1 #bezier #curve [{0}, {1}, 0] [{2}, {3}, 0] [{4}, {5}, 0]".format(node.x, node.y, node.x, node.y, node.bezierControlX, node.bezierControlY))
            else:
                maxScript("addKnot sp 1 #corner #line [{0}, {1}, 0]".format(node.x, node.y))

            if node.closeLoop:
                maxScript("close sp 1")
                maxScript("updateShape sp")
                maxScript("select sp")
                maxScript("sp.name = \"Pavement {0} {1}\"".format(index+1, name))
                #maxScript("poly = convertToPoly(sp)")


#########################################################
# Draw Runways
#########################################################
def drawRunways():
    {% for runway in Runways -%}
    drawRunway({{runway.X}}, {{runway.Y}}, {{runway.Length}}, {{runway.Width}}, {{runway.Angle}}, "Runway {{runway.Index | Plus:1 }}")
    {% endfor -%}

#########################################################
# Draw Runway Decals
#########################################################
def drawRunwayDecals():
    {% for runway in Runways -%}
    drawSingleRunwayDecals("Runway {{runway.Index | Plus:1 }}")
    {% endfor -%}

#########################################################
# Draw Single Runway Decals
#########################################################
def drawSingleRunwayDecals(name):
    pass

#########################################################
# Draw DAT File Pavement Splines
#########################################################
def drawDATFilePavementSplies():

    {% for pavement in DATPavements -%}
    # Pavement Pavement {{pavement.Index | Plus:1 }} {{pavement.Name}}
        splineNodeArray = []
        pavementName = "{{pavement.Name}}"
        pavementIndex = {{pavement.Index}}
    {% for node in pavement.Nodes -%}
    splineNodeArray.append(SplineNode({{node.X}},{{node.Y}},toBool("{{node.IsBezier}}"),{{node.BezierControlX}},{{node.BezierControlY}},toBool("{{node.OpenLoop}}"),toBool("{{node.CloseLoop}}"),toBool("{{node.Render}}")))
    {% endfor -%}
    drawSpline(splineNodeArray, pavementName, pavementIndex)
    {% endfor -%}

#########################################################
# Draw DSF File Pavement Splines
#########################################################
def drawDSFFilePavementSplies():
    pass

#########################################################
# Draw DSF File Buildings
#########################################################
def drawDSFFileBuildings():
    pass

#########################################################
# Draw Signs
#########################################################
def drawSigns():
    pass

#########################################################
# Convert DAT File Pavement Splines To Editable Polys
#########################################################
def convertDATFilePavementSplinesToEditablePolys():
    pass

#########################################################
# Convert Linear Feature Splines To Editable Polys
#########################################################
def convertLinearFeaturesSplinesToEditablePolys():
    pass

#########################################################
# Convert DSF File Pavement Splines To Editable Polys
#########################################################
def convertDSFFilePavementSplinesToEditablePolys():
    pass

#########################################################
# Texture Runways
#########################################################
def textureRunways():
    {% for runway in Runways -%}
    textureRunway("Runway {{runway.Index | Plus:1 }}", {{runway.Length}}, {{runway.Width}}, "{{runway.SurfaceType}}", "{{runway.ShoulderType}}")
    {% endfor -%}

#########################################################
# Texture Runway
#########################################################
def textureRunway(name, length, width, surfaceType, shoulderType):
    pass

#########################################################
# Texture Runway Decals
#########################################################
def textureRunwayDecals():
    pass

#########################################################
# Texture Runway Decals
#########################################################
def textureSingleRunwayDecals(name):
    pass

#########################################################
# Texture Pavements
#########################################################
def texturePavements():
    pass

#########################################################
# Texture Linear Features
#########################################################
def textureLinearFeatures():
    pass

#########################################################
# Boolean Union Runways
#########################################################
def booleanUnionRunways():
    pass

#########################################################
# Boolean Union Pavements
#########################################################
def booleanUnionPavements():
    pass


def maxScript(script):
    return MaxPlus.Core.EvalMAXScript(script)

def main():

    # Reset the max file
	MaxPlus.FileManager.Reset(True)

	# Maximise the top viewport
	MaxPlus.ViewportManager.SetActiveViewport(0)
	MaxPlus.ViewportManager.SetViewportMax(True)

    #Set units to meters. 1 unit = 1 meter
    maxScript("units.DisplayType = #Metric")
    maxScript("units.MetricType = #meters")
    maxScript("units.SystemType = #meters")
    maxScript("units.SystemScale = 1")

    if drawRunways:
        drawRunways()

    if drawRunwayDecals:
        drawRunwayDecals()

    if drawDATFilePavementSplies:
        drawDATFilePavementSplies()

	if drawDSFFilePavementSplies:
		drawDSFFilePavementSplies()

    if convertDATFilePavementSplinesToEditablePolys:
        convertDATFilePavementSplinesToEditablePolys()

    if convertLinearFeaturesSplinesToEditablePolys:
        convertLinearFeaturesSplinesToEditablePolys()

	if convertDSFFilePavementSplinesToEditablePolys:
	    convertDSFFilePavementSplinesToEditablePolys()

    if textureRunways:
        textureRunways()

    if textureRunwayDecals:
        textureRunwayDecals()

    if texturePavements:
        texturePavements()

    if textureLinearFeatures:
        textureLinearFeatures()

    if booleanUnionRunways:
        booleanUnionRunways()

    if booleanUnionPavements:
        booleanUnionPavements()

	if drawSigns:
		drawSigns()

    if saveFile:
        maxScript("saveMaxFile \"{0}\" saveAsVersion:2016".format(saveFilePath))

main()
