using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using XP2AFSAirportConverter.Common;

namespace XP2AFSAirportConverter.Models
{
    public class TSCSceneryObject
    {
        public string Type { get; set; }
        public string GeometryFile { get; set; }
        public GeoCoordinate3d Position { get; set; }
    }

    public class TSCParkingPosition
    {
        public GeoCoordinate Location { get; set; }
        public double Heading { get; set; }
        public string Name { get; set; }
    }

    public class TSCRunway
    {
        public double Width { get; set; }
        public TSCRunwayEnd End1 { get; set; }
        public TSCRunwayEnd End2 { get; set; }

    }

    public class TSCRunwayEnd
    {
        public string Name { get; set; }
        public GeoCoordinate ThresholdLocation { get; set; }
        public GeoCoordinate EndpointLocation { get; set; }
        public Direction PAPI { get; set; }
        public REILLights REILLights { get; set; }
        public ApproachLighting ApproachLighting { get; set; }

    }

    public class TSCFile
    {
        public string ICAO { get; set; }

        public string AirportLongName { get; set; }
        public string AirportShortName { get; set; }
        public GeoCoordinate Location { get; set; }
        public double? Height { get; set; }
        public GeoCoordinate TowerPosition { get; set; }
        public double TowerHeight { get; set; }
        public bool AutoHeight { get; set; }
        public IList<TSCSceneryObject> Objects { get; set; }
        public IList<TSCRunway> Runways { get; set; }
        public IList<TSCParkingPosition> ParkingPositions { get; set; }

        public TSCFile()
        {
            this.Objects = new List<TSCSceneryObject>();
            this.Runways = new List<TSCRunway>();
            this.ParkingPositions = new List<TSCParkingPosition>();
        }


        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("<[file][][]");
            sb.AppendLine("<[tmsimulator_scenery_place][][]");
            sb.AppendLine("");
            sb.AppendLine("//----------------------------------------------------------------------------");
            sb.AppendLine("// Generated by XP2AFSAirportConverter");
            sb.AppendLine("//----------------------------------------------------------------------------");
            sb.AppendLine("");
            sb.AppendLine("//----------------------------------------------------------------------------");
            sb.AppendLine("// general information");
            sb.AppendLine("//----------------------------------------------------------------------------");
            sb.AppendLine("<[string8]   [type]          [airport]>");
            sb.AppendLine("<[string8]   [sname]         [" + this.AirportShortName  + "]>");
            sb.AppendLine("<[string8]   [lname]         [" + this.AirportLongName + "]>");
            sb.AppendLine("<[string8]   [icao]          [" + this.ICAO + "]>");
            sb.AppendLine("<[tmvector2d][position]      [" + this.Location.Longitude.ToStringInvariant() + " " + this.Location.Latitude.ToStringInvariant() + "]> ");

            if (this.Height.HasValue)
            {
                sb.AppendLine("<[float64]   [height]        [" + this.Height.Value.ToStringInvariant() + "]>");
            }
            else
            {
                sb.AppendLine("<[float64]   [height]        [0]>");
            }

            sb.AppendLine("<[float64]   [size]          [5000]>");

            if (this.TowerPosition != null)
            {
                sb.AppendLine("<[tmvector2d][tower_position][" + this.TowerPosition.Longitude.ToStringInvariant() + " " + this.TowerPosition.Latitude.ToStringInvariant() + "]>");
                sb.AppendLine("<[float64]   [tower_height]  [" + this.TowerHeight.ToStringInvariant() + "]>");
            }

            sb.AppendLine("<[bool]      [autoheight]    [true]>");
            sb.AppendLine("<[string8]   [coordinate_system][lonlat]>");
            sb.AppendLine("");
            sb.AppendLine("");

            sb.AppendLine("//----------------------------------------------------------------------------");
            sb.AppendLine("// objects");
            sb.AppendLine("//----------------------------------------------------------------------------");
            sb.AppendLine("<[tmsimulator_scenery_objecttmslist][objects][]");

            int i = 0;
            foreach (TSCSceneryObject sceneryObject in this.Objects)
            {
                sb.AppendLine("  <[tmsimulator_scenery_object][element][" + i.ToString() + "]");
                sb.AppendLine("    <[string8][type][" + sceneryObject.Type + "]> ");
                sb.AppendLine("    <[string8][geometry][" + sceneryObject.GeometryFile + "]>");
                sb.AppendLine("    <[tmvector3d][position][" + sceneryObject.Position.Longitude.ToStringInvariant() + " " + sceneryObject.Position.Latitude.ToStringInvariant() + " " + 
                    sceneryObject.Position.Height.ToStringInvariant() + "]>");
                sb.AppendLine("  >");
                i++;
            }

            sb.AppendLine(">");
            sb.AppendLine("");
            sb.AppendLine("");


            sb.AppendLine("//----------------------------------------------------------------------------");
            sb.AppendLine("// runways");
            sb.AppendLine("//----------------------------------------------------------------------------");
            sb.AppendLine("<[tmsimulator_runwaytmslist][runways][]");

            i = 0;
            foreach (TSCRunway runway in this.Runways)
            {

                sb.AppendLine("  <[tmsimulator_runway][element][" + i.ToString() + "]");
                sb.AppendLine("    <[string8][name1][" + runway.End1.Name + "]>");
                sb.AppendLine("    <[tmvector2d][threshold1][" + runway.End1.ThresholdLocation.Longitude.ToStringInvariant() + " " + runway.End1.ThresholdLocation.Latitude.ToStringInvariant() + "]> ");
                sb.AppendLine("    <[tmvector2d][endpoint1][" + runway.End1.EndpointLocation.Longitude.ToStringInvariant() + " " + runway.End1.EndpointLocation.Latitude.ToStringInvariant() + "]>");
                sb.AppendLine("    <[string8]   [appltsys1][" + this.GetApproachLightingString(runway.End1.ApproachLighting) + "]> ");
                sb.AppendLine("    <[string8]   [papi1][" + this.GetPAPIString(runway.End1.PAPI) + "]>");
                sb.AppendLine("    <[string8]   [reil1][" + this.GetREILString(runway.End1.REILLights) +  "]>");
                sb.AppendLine("    <[string8][name2][" + runway.End2.Name + "]>");
                sb.AppendLine("    <[tmvector2d][threshold2][" + runway.End2.ThresholdLocation.Longitude.ToStringInvariant() + " " + runway.End2.ThresholdLocation.Latitude.ToStringInvariant() + "]> ");
                sb.AppendLine("    <[tmvector2d][endpoint2][" + runway.End2.EndpointLocation.Longitude.ToStringInvariant() + " " + runway.End2.EndpointLocation.Latitude.ToStringInvariant() + "]>");
                sb.AppendLine("    <[string8]   [appltsys2][" + this.GetApproachLightingString(runway.End2.ApproachLighting) + "]> ");
                sb.AppendLine("    <[string8]   [papi2][" + this.GetPAPIString(runway.End2.PAPI) + "]>");
                sb.AppendLine("    <[string8]   [reil2][" + this.GetREILString(runway.End2.REILLights) + "]>");
                sb.AppendLine("    <[float64][width]["+ runway.Width.ToStringInvariant() +"]>");
                sb.AppendLine("  >");
                i++;
            }

            sb.AppendLine(">");
            sb.AppendLine("");
            sb.AppendLine("");


            sb.AppendLine("//----------------------------------------------------------------------------");
            sb.AppendLine("// parking positions");
            sb.AppendLine("//----------------------------------------------------------------------------");
            sb.AppendLine("<[tmsimulator_parking_positiontmslist][parking_positions][]");

            i = 0;
            foreach (TSCParkingPosition parkingPosition in this.ParkingPositions)
            {
                sb.AppendLine("  <[tmsimulator_parking_position][element]["+ i.ToString() +"]");
                sb.AppendLine("    <[tmvector2d][position][" + parkingPosition.Location.Longitude.ToStringInvariant() + " " + parkingPosition.Location.Latitude.ToStringInvariant() + "]> ");
                sb.AppendLine("    <[float64][heading][" + parkingPosition.Heading.ToStringInvariant() + "]>");
                sb.AppendLine("    <[string8][name][" + parkingPosition.Name + "]>");
                sb.AppendLine("  >");
                i++;
            }

            sb.AppendLine(">");
            sb.AppendLine("");
            sb.AppendLine("");
            sb.AppendLine(">");
            sb.AppendLine(">");
            sb.AppendLine("");
            sb.AppendLine("");

            return sb.ToString();

        }

        private string GetApproachLightingString(ApproachLighting approachLighting)
        {
            string approachLightingStr = "";

            switch (approachLighting)
            {
                case ApproachLighting.NoApproachLighting:
                    approachLightingStr = "none";
                    break;
                case ApproachLighting.ALSFI:
                    approachLightingStr = "alsf-1";
                    break;
                case ApproachLighting.ALSFII:
                    approachLightingStr = "alsf-2";
                    break;
                case ApproachLighting.Calvert:
                    approachLightingStr = "calvert";
                    break;
                case ApproachLighting.CalvertILSCatIIAndCatII:
                    approachLightingStr = "calvert-2";
                    break;
                case ApproachLighting.SSALR:
                    //approachLightingStr = "alsf-1";
                    break;
                case ApproachLighting.SSALF:
                    //approachLightingStr = "alsf-1";
                    break;
                case ApproachLighting.SALS:
                    approachLightingStr = "sals";
                    break;
                case ApproachLighting.MALSR:
                    approachLightingStr = "malsr";
                    break;
                case ApproachLighting.MALSF:
                    approachLightingStr = "malsf";
                    break;
                case ApproachLighting.MALS:
                    //approachLightingStr = "alsf-1";
                    break;
                case ApproachLighting.ODALS:
                    approachLightingStr = "odals";
                    break;
                case ApproachLighting.RAIL:
                    approachLightingStr = "rail";
                    break;
                case ApproachLighting.Standard:
                    approachLightingStr = "std";
                    break;
                default:
                    break;
            }

            return approachLightingStr;
        }

        private string GetPAPIString(Direction papiLocation)
        {
            string papiStr = "";

            switch (papiLocation)
            {
                case Direction.Left:
                    papiStr = "left";
                    break;
                case Direction.Right:
                    papiStr = "right";
                    break;
                default:
                    break;
            }

            return papiStr;
        }

        private string GetREILString(REILLights reilLights)
        {
            string reilStr = "";

            switch (reilLights)
            {
                case REILLights.NoREIL:
                    reilStr = "none";
                    break;
                case REILLights.OmniDirectionalREIL:
                    reilStr = "reil_omni";
                    break;
                case REILLights.UnidirectionalREIL:
                    reilStr = "reil_uni";
                    break;
                default:
                    break;
            }

            return reilStr;
        }
    }
}
