using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace XP2AFSAirportConverter.XP
{
    //https://developer.x-plane.com/article/airport-data-apt-dat-file-format-specification
    //http://developer.x-plane.com/wp-content/uploads/2015/11/XP-APT850-Spec.pdf
    //http://developer.x-plane.com/wp-content/uploads/2015/11/XP-APT1000-Spec.pdf

    public class DATFile
    {
        public AirportHeader AirportHeader { get; set; }
        public LandRunway LandRunway { get; set; }
    }

    public enum AirportType
    {
        Airport,
        SeaPlaneBase,
        Helipad
    }

    public enum SurfaceType
    {
        Asphalt = 1,
        Concrete = 2,
        Grass = 3,
        Dirt = 4,
        Gravel = 5,
        DryLakeBed = 12,
        Water = 13,
        SnowOrIce = 14,
        Transparent = 15
    }

    public enum ShoulderType
    {
        NoShoulder = 0,
        AsphaltShoulder = 1,
        ConcreneShoulder = 2
    }

    public enum RunwayEdgeLights
    {
        NoEdgeLights = 0,
        MediumIntensityEdgeLights = 2
    }

    public enum RunwayMarkings
    {
        NoRunwayMarkings = 0,
        VisualMarkings = 1,
        NonPrecisionApproachMarkings = 2,
        PrecisionApproachMarkings = 3,
        UKStyleNonPrecisionApproachMarkings = 4,
        UKStylePrecisionApproachMarkings = 5
    }

    public enum ApproachLighting
    {
        NoApproachLighting = 0,
        ALSFI = 1,
        ALSFII = 2,
        Calvert = 3,
        CalvertILSCatIIAndCatII = 4,
        SSALR = 5,
        SSALF = 6,
        SALS = 7,
        MALSR = 8,
        MALSF = 9,
        MALS = 10,
        ODALS = 11,
        RAIL = 12
    }

    public enum REILLights
    {
        NoREIL = 0,
        OmniDirectionalREIL = 1,
        UnidirectionalREIL = 2
    }


    public enum LineType
    {
        Nothing = 0,
        SolidYellowLine = 1,
        BrokenYellowLine = 2,
        DoubleSolidYellowLines = 3,
        TwoBrokenYellowLinesAndTwoSolidYellowLines = 4,
        BrokenYellowLineWithParallelSolidYellowLine = 5,
        YellowCrossHatchedLine = 6,
        SolidYellowLineWithBrokenYellowLineOnEachSide = 7,
        WidelySeparatedBrokenYellowLine = 8,

    }

    public enum BeaconType
    {
        NoBeacon = 0,
        WhiteGreenFlashing = 1,
        WhiteYellowFlashing = 2,
        GreenYelloWhiteFlashing = 3,
        WhiteWhiteGreenFlashing = 4
    }

    public enum SignSize
    {
        SmallTaxiwaySign = 1,
        MediumTaxiwaySign = 2,
        LargeTaxiwaySign = 3,
        LargeDistanceRemainingSignOnRunwayEdge = 4,
        SmallDistanceRemainingSignOnRunwayEdge = 5,

    }

    public enum LightingObjectType
    {
        VASI = 1,
        PAPI4L = 2,
        PAPI4R = 3,
        SpaceShuttlePAPI =4,
        TriColourVASI = 5,
        RunwayGuard = 6
    }

    public enum Direction
    {
        Left,
        Right
    }

    public enum TaxiLocationType
    {
        Gate,
        Hangar,
        Misc,

    }

    public enum AirplaneType
    {
        Heavy,
        Jets,
        Turboprops,
        Props,
        Helos,
        All
           
    }

    public class AirportHeader
    {
        public double ElevationFeet { get; set; }
        public string ICAOCode { get; set; }
        public string Name { get; set; }
        public AirportType AirportType { get; set; }
    }

    public class LandRunway
    {
        public double Width { get; set; }
        public SurfaceType SurfaceType { get; set; }
        public ShoulderType ShoulderType { get; set; }
        public double Smoothness { get; set; }
        public bool HasCenterLineLights { get; set; }
        public RunwayEdgeLights EdgeLights { get; set; }
        public bool AutoGenerateDistanceRemainingSigns { get; set; }
        public LandRunwayEnd End1 { get; set; }
        public LandRunwayEnd End2 { get; set; }
    }

    public class LandRunwayEnd
    {
        public string Number { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double LengthOfDisplacedThreshold { get; set; }
        public double LengthOfOverrun { get; set; }
        public RunwayMarkings RunwayMarkings  { get; set; }
        public ApproachLighting ApproachLighting { get; set; }
        public bool FlagForRunwayTouchdownZoneLighting { get; set; }
        public REILLights REILLights { get; set; }
    }


    public class WaterRunway
    {
        public double Width { get; set; }

        public bool HasPerimeterBuoys { get; set; }

    }

    public class WaterRunwayEnd
    {
        public string Number { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    public class Helipad
    {
        public string Designator { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double Orientation { get; set; }
        public double Length { get; set; }
        public double Width { get; set; }
        public SurfaceType SurfaceCode { get; set; }
        public string HelipadMarkings { get; set; }
        public ShoulderType ShoulderSurfaceType { get; set; }
        public double Smoothness { get; set; }
        public bool HasEdgeLighting { get; set; }

    }

    public class Pavement
    {
        public IList<Node> Nodes { get; set; }
        public SurfaceType SurfaceCode { get; set; }
        public double Smoothness { get; set; }
        public double Orientation { get; set; }
        public string Description { get; set; }
    }

    public class LinearFeature
    {
        public string Description { get; set; }
        public IList<Node> Nodes { get; set; }

    }

    public class AirportBoundary
    {
        public string Description { get; set; }
        public IList<Node> Nodes { get; set; }

    }

    public class Node
    {
        public double X { get; set; }
        public double Y { get; set; }

        public double BezierControlPointX { get; set; }
        public double BezierControlPointY { get; set; }
        public bool End { get; set; }
        public bool CloseLoop { get; set; }

        public LineType LineType { get; set; }
    }



    public class Viewpoint
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double HeightInFeet { get; set; }
        public string Name { get; set; }
    }

    public class StarupLocationp
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double Heading { get; set; }
        public string Name { get; set; }
    }

    public class LightBeacon
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public BeaconType BeaconType { get; set; }
        public string Name { get; set; }
    }

    public class Windsock
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public bool IsIlluminated { get; set; }
        public string Name { get; set; }
    }

    public class Sign
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public double Orientation { get; set; }
    }

    public class LightingObject
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public LightingObjectType LightingObjectType { get; set; }
        public double Orientation { get; set; }
        public double VisualGlideslopeAngle { get; set; }
        public string AssociatedRunwayNumber { get; set; }
        public string Description { get; set; }
    }

    public class TrafficFlow
    {

    }

    public class TrafficFlowWindRule
    {

    }

    public class TrafficFlowCeilingRule
    {

    }

    public class TrafficFlowVisibilityRule
    {

    }

    public class TrafficTimeRule
    {
    }

    public class RunwayInUseRule
    {

    }

    public class VFRPatternRule
    {
        public string Runway { get; set; }
        public Direction Direction { get; set; }
    }

    public class TaxiRoutingNetwork
    {

    }

    public class TaxiRoutingNode
    {

    }

    public class TaxiRoutingEdge
    {
        
    }

    public class EdgeActiveZone
    {

    }

    public class TaxiLocation
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }

        public double Heading { get; set; }

        public TaxiLocationType TaxiLocationType { get; set; }

        public AirplaneType AirplaneType { get; set; }
    }

    public class ATCRecorded
    {

    }

    public class ATCUnicom
    {

    }

    public class ATCClearanceDelivery
    {

    }

    public class ATCGround
    {

    }

    public class ATCTower
    {

    }

    public class ATCApproach
    {

    }

    public class ATCDeparture
    {

    }

    public class Metadata
    {
        public Dictionary<string, string> Values { get; set; }
    }
}
